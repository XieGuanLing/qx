import java.nio.file.Files
import java.nio.file.attribute.BasicFileAttributes

group 'com.gl'
version '1.0-SNAPSHOT'



buildscript {
    repositories {
        maven { url "http://bridge.realscloud.com:12345/nexus/content/groups/public/" }
//        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.6"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

springBoot {
    //有多个main方法时需要指定
    mainClass = 'com.ws.BootApplication'
    layout = 'ZIP'
}


dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:1.5.7.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-tomcat:1.5.7.RELEASE"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '1.5.7.RELEASE'

    compile group: 'org.springframework.session', name: 'spring-session', version: '1.3.1.RELEASE'

//    CreatedDate 注解
    compile group: 'org.springframework.data', name: 'spring-data-commons', version: '1.13.7.RELEASE'
    compile ("org.springframework.boot:spring-boot-starter-data-jpa:1.5.7.RELEASE"){
        exclude(module: 'hibernate-core')
        exclude(module: 'hibernate-entitymanager')
    }
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.10.Final'
//    compile 'org.springframework.session:spring-session:1.3.1.RELEASE'




    compile group: 'org.apache.tomcat', name: 'tomcat-jdbc', version: '8.5.20'
    compile "org.springframework:spring-jdbc"


//  生成接口文档
    compile("io.springfox:springfox-swagger2:2.6.0")
    compile('io.springfox:springfox-swagger-ui:2.6.0')
    compile("io.springfox:springfox-bean-validators:2.6.0")


    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.35'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'

    compile 'org.redisson:redisson:3.10.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.8'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.8'


//    工具包
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.reflections:reflections:0.9.11'
    compile 'joda-time:joda-time:2.10.1'

}


processResources.doFirst {

    List<File> files = []

    Map<String,String> versionedMap = [:]

    fileTree(dir: "${projectDir}/src/main/resources/db/migration").exclude({
        def prefixed = isFilePrefixed(it.file)
        if(prefixed)
            versionedMap.put(it.file.name.substring(20),it.file.name)
        return prefixed
    }).each { file ->
        def versionedFile = versionedMap.get(file.name)
        if(versionedFile)
            throw new RuntimeException("检测到冲突脚本\n脚本文件:" +
                    "\n\t\t$file.absolutePath \n\t\t$file.parentFile.absolutePath${file.separator}$versionedFile " +
                    "\n建议:" +
                    "\n\t\t1.如果脚本内容一致请删除$file.absolutePath " +
                    "\n\t\t2.如果脚本内容不一致请重命名脚本文件$file.absolutePath")
        files << file
    }

    fileTree(dir: "${projectDir}/src/main/java/com/ys/scs/db/migration").exclude({
        def prefixed = isFilePrefixed(it.file)
        if(prefixed)
            versionedMap.put(it.file.name.substring(20),it.file.name)
        return prefixed
    }).each { file ->
        def versionedFile = versionedMap.get(file.name)
        if(versionedFile)
            throw new RuntimeException("检测到冲突脚本\n脚本文件:" +
                    "\n\t\t$file.absolutePath \n\t\t$file.parentFile.absolutePath${file.separator}$versionedFile " +
                    "\n建议:" +
                    "\n\t\t1.如果脚本内容一致请删除$file.absolutePath " +
                    "\n\t\t2.如果脚本内容不一致请重命名脚本文件$file.absolutePath")
        files << file
    }

    files.sort({ f1, f2 ->
        BasicFileAttributes attr1 = Files.readAttributes(f1.toPath(), BasicFileAttributes.class)
        BasicFileAttributes attr2 = Files.readAttributes(f2.toPath(), BasicFileAttributes.class)
        return attr1.creationTime() <=> attr2.creationTime()
    })

    def removeOldFile = {file->
        try{
            Runtime.getRuntime().exec("git rm ${file.getAbsolutePath()}")
        }catch (Throwable e){
            //ignore
        }
    }

    files.each { file ->
        def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT+8'))
        if (file.name.endsWith(".sql")) {
            println "Renaming $file.name to ${timestamp}__$file.name"
            file.renameTo("$file.parentFile.absolutePath${file.separator}V${timestamp}__$file.name")
            removeOldFile(file)
        } else if (file.name.endsWith(".java")) {
            def oldName = file.name
            def newName = "V${timestamp}__$file.name"
            println "Renaming $oldName to $newName"
            file.text = file.text.replace(oldName - '.java', newName - '.java')
            file.renameTo("$file.parentFile.absolutePath${file.separator}$newName")
            removeOldFile(file)
        }
        // Sleep for a moment to avoid prefix conflicts when renaming multiple files
        sleep(1 * 1000)
    }

}

def isFilePrefixed(file) {
    return (file.name ==~ '^V\\d+__.*\\.(sql|java)\$')
}
